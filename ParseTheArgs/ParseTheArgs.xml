<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ParseTheArgs</name>
    </assembly>
    <members>
        <member name="T:ParseTheArgs.DefaultDependencyResolver">
            <summary>
            The default dependency resolver.
            </summary>
        </member>
        <member name="M:ParseTheArgs.DefaultDependencyResolver.Resolve``1(System.Object[])">
            <summary>
            Resolves the dependency of the given type <typeparamref name="TDependency" /> passing along the given constructor arguments.
            </summary>
            <typeparam name="TDependency">The type of dependency to resolve.</typeparam>
            <param name="constructorArguments">The arguments to pass to the constructor of <typeparamref name="TDependency" />.</param>
            <returns>An instance of <typeparamref name="TDependency" />.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.DuplicateOptionError">
            <summary>
            Represents an error that indicates that an option is given multiple times.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.DuplicateOptionError.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option that is given multiple times.</param>
        </member>
        <member name="M:ParseTheArgs.Errors.DuplicateOptionError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.InvalidOptionError">
            <summary>
            Represents an error that indicates that an option is invalid.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.InvalidOptionError.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option which is invalid.</param>
            <param name="message">The message that describes why the option is invalid.</param>
        </member>
        <member name="P:ParseTheArgs.Errors.InvalidOptionError.Message">
            <summary>
            The message that describes why the option is invalid
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.InvalidOptionError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.IParseError">
            <summary>
            Represents an error that indicates that there is an issue with the command line arguments which where parsed.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.IParseError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.MissingCommandError">
            <summary>
            Represents an error that indicates that no command is given.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.MissingCommandError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.MoreThanOneCommandError">
            <summary>
            Represents an error that indicates that more than one command is given.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.MoreThanOneCommandError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.OptionError">
            <summary>
            Represents an error that indicates an issue with an option.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionError.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option which caused the error.</param>
        </member>
        <member name="P:ParseTheArgs.Errors.OptionError.OptionName">
            <summary>
            The name of the option which caused the error.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.OptionMissingError">
            <summary>
            Represents an error that indicates that a required option is missing.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionMissingError.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option that is missing.</param>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionMissingError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.OptionMultipleValuesError">
            <summary>
            Represents an error that indicates that multiple values are given for an option that only supports a single value.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionMultipleValuesError.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option for which multiple values are given.</param>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionMultipleValuesError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.OptionValueInvalidFormatError">
            <summary>
            Represents an error that indicates that the value of an option has an invalid format.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionValueInvalidFormatError.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option whose value has an invalid format.</param>
            <param name="invalidOptionValue">The option value that has an invalid format.</param>
            <param name="expectedValueFormat">The format the value was expected to have.</param>
        </member>
        <member name="P:ParseTheArgs.Errors.OptionValueInvalidFormatError.ExpectedValueFormat">
            <summary>
            The format the value was expected to have.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Errors.OptionValueInvalidFormatError.InvalidOptionValue">
            <summary>
            The option value that has an invalid format.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionValueInvalidFormatError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.OptionValueMissingError">
            <summary>
            Represents an error that indicates that no value is given for an option that requires a value.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionValueMissingError.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option for which the value is missing.</param>
        </member>
        <member name="M:ParseTheArgs.Errors.OptionValueMissingError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.UnknownCommandError">
            <summary>
            Represents an error that indicates that an unknown command is given.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.UnknownCommandError.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandName">The name of the command that is unknown.</param>
        </member>
        <member name="P:ParseTheArgs.Errors.UnknownCommandError.CommandName">
            <summary>
            The name of the command that is unknown.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.UnknownCommandError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.Errors.UnknownOptionError">
            <summary>
            Represents an error that indicates that an unknown option is given.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Errors.UnknownOptionError.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option that is unknown.</param>
        </member>
        <member name="M:ParseTheArgs.Errors.UnknownOptionError.GetErrorMessage">
            <summary>
            Gets the error message that describes the error.
            </summary>
            <returns>The error message that describes the error.</returns>
        </member>
        <member name="T:ParseTheArgs.ExpressionHelper">
            <summary>
            Provides utility functions to deal with expressions.
            </summary>
        </member>
        <member name="M:ParseTheArgs.ExpressionHelper.GetPropertyFromPropertyExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Extracts the property from a linq expression that accesses a property.
            </summary>
            <param name="propertyExpression">The expression to extract the property from.</param>
            <returns>The property that was extracted from the given expression.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="propertyExpression" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyExpression" /> is not a access call to a property.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyExpression" /> is accessing a property that does not have a public setter.</exception>
            <example>
            <code>
            class Item
            {
                public Int32 PropertyA { get; set; }
            }
            
            Expression{Func{Item, Object}} expression = ((item) => item.PropertyA)
            ExpressionHelper.GetPropertyFromPropertyExpression(expression);  // returns same as typeof(Item).GetProperty("PropertyA") would.
            </code>
            </example>
        </member>
        <member name="T:ParseTheArgs.Extensions.PropertyInfoExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.PropertyInfo" /> type.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Extensions.PropertyInfoExtensions.HasPublicSetter(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the property the given PropertyInfo represents has a public setter.
            </summary>
            <param name="propertyInfo">The PropertyInfo to check.</param>
            <returns>True if the property the given PropertyInfo represents has a public setter; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="propertyInfo" /> is null.</exception>
        </member>
        <member name="T:ParseTheArgs.Extensions.StringExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.String" /> type.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Extensions.StringExtensions.SplitWords(System.String)">
            <summary>
            Splits the given text into individual words in the order they appear in the text.
            
            The text is split each time:
            - A space character is found or
            - A underscore character is found or
            - When the casing in the text changes form lower to upper case.
            
            Each word is returned in lower case.
            </summary>
            <param name="text">The text to split into words.</param>
            <returns>The words present in the given text.</returns>
            <example>
            <code>
            "commandLineArgument".SplitWords();   // Returns ["command", "line", "argument"].
            "CommandLineArgument".SplitWords();   // Returns ["command", "line", "argument"].
            "command_line_argument".SplitWords(); // Returns ["command", "line", "argument"].
            "command line argument".SplitWords(); // Returns ["command", "line", "argument"].
            "command1options".SplitWords();       // Returns ["command1", "options"].
            </code>
            </example>
        </member>
        <member name="M:ParseTheArgs.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the given string into camel case (see https://en.wikipedia.org/wiki/Camel_case).
            </summary>
            <param name="value">The string to convert to lower camel case.</param>
            <returns>The given string converted to lower camel case.</returns>
            "commandLineArgument".ToCamelCase();   // Returns "commandLineArgument".
            "CommandLineArgument".ToCamelCase();   // Returns "commandLineArgument".
            "command_line_argument".ToCamelCase(); // Returns "commandLineArgument".
            "command line argument".ToCamelCase(); // Returns "commandLineArgument".
        </member>
        <member name="M:ParseTheArgs.Extensions.StringExtensions.ToFirstLetterUpperCase(System.String)">
            <summary>
            Gets the given string where the first character is converted to upper case.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The given string where the first character is converted to upper case.</returns>
            <example>
            "a".ToFirstLetterUpperCase(); // Returns "A".
            "A".ToFirstLetterUpperCase(); // Returns "A".
            "ab".ToFirstLetterUpperCase(); // Returns "Ab".
            "aB".ToFirstLetterUpperCase(); // Returns "AB".
            </example>
        </member>
        <member name="M:ParseTheArgs.Extensions.StringExtensions.WordWrap(System.String,System.Int32)">
            <summary>
            Wraps the words in the given text at the specified line length boundary.
            </summary>
            <param name="text">The text to wrap the words in.</param>
            <param name="lineLength">The length of the line available for the text.</param>
            <returns>The wrapped lines of the given text.</returns>
        </member>
        <member name="T:ParseTheArgs.IDependencyResolver">
            <summary>
            Resolves dependencies.
            </summary>
        </member>
        <member name="M:ParseTheArgs.IDependencyResolver.Resolve``1(System.Object[])">
            <summary>
            Resolves the dependency of the given type <typeparamref name="TDependency" /> passing along the given constructor arguments.
            </summary>
            <typeparam name="TDependency">The type of dependency to resolve.</typeparam>
            <param name="constructorArguments">The arguments to pass to the constructor of <typeparamref name="TDependency" />.</param>
            <returns>An instance of <typeparamref name="TDependency" />.</returns>
        </member>
        <member name="T:ParseTheArgs.Parser">
            <summary>
            Parses command line arguments.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parser.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parser.Banner">
            <summary>
            Defines a banner text to display at the beginning of help texts and error texts (e.g. in the return value of <see cref="M:ParseTheArgs.Parser.GetHelpText(System.Boolean)" /> or <see cref="M:ParseTheArgs.Parser.GetErrorsText(ParseTheArgs.ParseResult,System.Boolean)" />).
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parser.ErrorTextWriter">
            <summary>
            Defines the text writer to write error messages to.
            </summary>
            <remarks>The default is <see cref="P:System.Console.Error" />.</remarks>
        </member>
        <member name="P:ParseTheArgs.Parser.HelpTextMaxLineLength">
            <summary>
            Defines the maximum length a line of a help text can have.
            If not explicitly set via <see cref="M:ParseTheArgs.Setup.ParserSetup.HelpTextMaxLineLength(System.Int32)" /> the current width of the console width is used or, if no console is available, <see cref="F:System.Int32.MaxValue" /> is used.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parser.HelpTextWriter">
            <summary>
            Defines the text writer to write help messages to.
            </summary>
            <remarks>The default is <see cref="P:System.Console.Out" />.</remarks>
        </member>
        <member name="P:ParseTheArgs.Parser.IgnoreUnknownOptions">
            <summary>
            Determines whether to ignore options that are unknown when options are parsed.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parser.ProgramName">
            <summary>
            Defines the name of the program to display in help texts.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parser.Setup">
            <summary>
            Gets the setup for the parser that allows to configure the parser.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parser.GetCommandHelpText(System.String,System.Boolean)">
            <summary>
            Gets the help text of the command with the given name.
            </summary>
            <param name="commandName">The name of the command to get the help text for.</param>
            <param name="includeBanner">Determines if the returned text should contain the banner (which can be set up via (<see cref="M:ParseTheArgs.Setup.ParserSetup.Banner(System.String)" />) at the beginning.</param>
            <returns>The help text of the command with the given name.</returns>
        </member>
        <member name="M:ParseTheArgs.Parser.GetErrorsText(ParseTheArgs.ParseResult,System.Boolean)">
            <summary>
            Gets the error messages for the errors of the given parse result.
            If the given parse result does not have errors an empty string is returned.
            </summary>
            <param name="parseResult">The parse result to get the error messages for.</param>
            <param name="includeBanner">Determines if the returned text should contain the banner (which can be set up via (<see cref="M:ParseTheArgs.Setup.ParserSetup.Banner(System.String)" />) at the beginning.</param>
            <returns>The error messages for the errors of the given parse result.</returns>
        </member>
        <member name="M:ParseTheArgs.Parser.GetHelpText(System.Boolean)">
            <summary>
            Gets the general help text for commands and options.
            </summary>
            <param name="includeBanner">Determines if the returned text should contain the banner (which can be set up via (<see cref="M:ParseTheArgs.Setup.ParserSetup.Banner(System.String)" />) at the beginning.</param>
            <returns>The general help text for commands and options.</returns>
        </member>
        <member name="M:ParseTheArgs.Parser.Parse(System.String[])">
            <summary>
            Parses the given command line arguments according to the configuration of this instance (see <see cref="P:ParseTheArgs.Parser.Setup" />).
            </summary>
            <param name="args">The command line arguments to parse.</param>
            <returns>The result of the parsing.</returns>
        </member>
        <member name="M:ParseTheArgs.Parser.CanCommandParserUseCommandName(ParseTheArgs.Parsers.Commands.ICommandParser,System.String)">
            <summary>
            Determines whether the specified command parser can use the specified command name.
            If no other command parser than the specified one currently uses the specified command name this method returns true.
            In another command parser than the specified one currently uses the specified command name this method returns false.
            </summary>
            <param name="commandParser">The command parser that wants to use the specified command name.</param>
            <param name="commandName">The command name to check.</param>
            <returns>True if no command parser other than the specified one currently uses the specified command name; otherwise, false.</returns>
        </member>
        <member name="M:ParseTheArgs.Parser.GetOrCreateCommandParser``1(System.String)">
            <summary>
            Gets an existing command parser for the specified command options (<typeparamref name="TCommandOptions" />) and the specified command name.
            In case no such command parser exists yet a new one will be created.
            </summary>
            <typeparam name="TCommandOptions">The type in which the values of the options of the command will be stored.</typeparam>
            <param name="commandName">The name of the command. If not specified (null) the command parser for the default command will be returned.</param>
            <returns>The command parser for the specified command.</returns>
        </member>
        <member name="T:ParseTheArgs.ParseResult">
            <summary>
            Represents the result of the parsing of command line arguments.
            </summary>
        </member>
        <member name="M:ParseTheArgs.ParseResult.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="P:ParseTheArgs.ParseResult.CommandName">
            <summary>
            Defines the name of the command that was found in the parsed command line arguments.
            </summary>
        </member>
        <member name="P:ParseTheArgs.ParseResult.CommandOptions">
            <summary>
            Defines the Object that holds the options of the parsed command.
            </summary>
        </member>
        <member name="P:ParseTheArgs.ParseResult.Errors">
            <summary>
            A list of errors found during parsing.
            </summary>
        </member>
        <member name="P:ParseTheArgs.ParseResult.HasErrors">
            <summary>
            Determines if errors where found during parsing.
            </summary>
        </member>
        <member name="P:ParseTheArgs.ParseResult.IsHelpCalled">
            <summary>
            Determines whether the command line was just used to get the help of the program (e.g. no command and/or options where passed or the help command was specified).
            </summary>
        </member>
        <member name="M:ParseTheArgs.ParseResult.AddError(ParseTheArgs.Errors.IParseError)">
            <summary>
            Adds a parse error to this instance.
            </summary>
            <param name="error">The error to add.</param>
        </member>
        <member name="M:ParseTheArgs.ParseResult.CommandHandler``1(System.Func{``0,System.Int32})">
            <summary>
            Sets up a command handler for a specific command.
            The handler will be invoked when the <see cref="M:ParseTheArgs.ParseResult.Handle" /> method is called and <see cref="P:ParseTheArgs.ParseResult.CommandOptions" /> is of type <typeparamref name="TCommandOptions" />.
            The return value of the specified handler is returned by the <see cref="M:ParseTheArgs.ParseResult.Handle" /> method when the handler is invoked.
            </summary>
            <typeparam name="TCommandOptions">The type of the command options the handler handles.</typeparam>
            <param name="commandHandler">The handler that handles the command options of type <typeparamref name="TCommandOptions" />.</param>
        </member>
        <member name="M:ParseTheArgs.ParseResult.ErrorHandler(System.Func{ParseTheArgs.ParseResult,System.Int32})">
            <summary>
            Sets up an error handler.
            The handler will be invoked when <see cref="M:ParseTheArgs.ParseResult.Handle" /> is called and <see cref="P:ParseTheArgs.ParseResult.HasErrors" /> is true.
            The return value of the specified handler is returned by the <see cref="M:ParseTheArgs.ParseResult.Handle" /> method when the handler is invoked.
            </summary>
            <param name="errorHandler">The handler that handles the errors.</param>
        </member>
        <member name="M:ParseTheArgs.ParseResult.Handle">
            <summary>
            Handles the result of the command line parsing.
            The command handler that was set up (via the <see cref="M:ParseTheArgs.ParseResult.CommandHandler``1(System.Func{``0,System.Int32})" /> method) for the current command will be invoked.
            In case <see cref="P:ParseTheArgs.ParseResult.HasErrors" /> is true, the error handler that was set up (via the <see cref="M:ParseTheArgs.ParseResult.ErrorHandler(System.Func{ParseTheArgs.ParseResult,System.Int32})" /> method) will be invoked.
            </summary>
            <returns>
            The return value of the command handler that was set up for the current command.
            If no command handler was set up for the current command 0 will be returned.
            
            If <see cref="P:ParseTheArgs.ParseResult.HasErrors" /> is true and an error handler was set up the return value of the error handler will be returned.
            If <see cref="P:ParseTheArgs.ParseResult.HasErrors" /> is true and no error handler was set up 0 will be returned.
            </returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Commands.CommandParser`1">
            <summary>
            Parses a command line command.
            </summary>
            <typeparam name="TCommandOptions">The type in which the values of the options of the command will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.CommandParser`1.#ctor(ParseTheArgs.Parser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parser">The parser the command parser belongs to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parser" /> is null.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Commands.CommandParser`1.CommandExampleUsage">
            <summary>
            Defines a text that describes an example usage of the command.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Commands.CommandParser`1.CommandHelp">
            <summary>
            Defines the help text of the command.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Commands.CommandParser`1.CommandName">
            <summary>
            Defines the name of the command.
            Will be <see cref="F:System.String.Empty" /> if the command is the default command (see <see cref="P:ParseTheArgs.Parsers.Commands.ICommandParser.IsCommandDefault" />).
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Commands.CommandParser`1.IsCommandDefault">
            <summary>
            Determines if the command is the default (non-named) command.
            If the command is the default command <see cref="P:ParseTheArgs.Parsers.Commands.ICommandParser.CommandName" /> will be null.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Commands.CommandParser`1.Validator">
            <summary>
            Defines the validator to use to validate the command and its options.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.CommandParser`1.GetHelpText">
            <summary>
            Gets the help text of the command.
            </summary>
            <returns>The help text of the command.</returns>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.CommandParser`1.GetOrCreateOptionParser``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets an existing option parser of type <typeparamref name="TOptionParser" /> for the specified target property <paramref name="targetProperty" />.
            In case no such option parser exists yet a new one will be created.
            </summary>
            <typeparam name="TOptionParser">The type of option parser to get or create.</typeparam>
            <param name="targetProperty">The target property to get or create the option parser for.</param>
            <returns>The option parser of the specified type and for the specified target property.</returns>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.CommandParser`1.Parse(System.Collections.Generic.List{ParseTheArgs.Tokens.Token},ParseTheArgs.ParseResult)">
            <summary>
            Parses the given tokens and puts the result of the parsing into the given parse result object.
            </summary>
            <param name="tokens">The tokens to parse.</param>
            <param name="parseResult">The object where to put the result of the parsing into.</param>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.CommandParser`1.Validate(System.Collections.Generic.List{ParseTheArgs.Tokens.Token},ParseTheArgs.ParseResult)">
            <summary>
            Validates the given tokens and puts the result of the validation into the given parse result object.
            </summary>
            <param name="tokens">The tokens to validate.</param>
            <param name="parseResult">The object where to put the result of the validation into.</param>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.CommandParser`1.CanOptionParserUseOptionName(ParseTheArgs.Parsers.Options.OptionParser,System.String)">
            <summary>
            Determines whether the specified option parser can use the specified option name.
            If no other option parser than the specified one currently uses the specified option name this method returns true.
            In another option parser than the specified one currently uses the specified option name this method returns false.
            </summary>
            <param name="optionParser">The option parser that wants to use the specified option name.</param>
            <param name="optionName">The option name to check.</param>
            <returns>True if no option parser other than the specified one currently uses the specified option name; otherwise, false.</returns>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.CommandParser`1.TryGetOptionName(System.Reflection.PropertyInfo,System.String@)">
            <summary>
            Gets the name of the option that is associated with the given target property.
            </summary>
            <param name="targetProperty">The target property to get the option name for.</param>
            <param name="optionName">The name of the option that is associated with the given target property.</param>
            <returns>True if an option exists that is associated with the given target property; otherwise, false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Commands.ICommandParser">
            <summary>
            Represents a parser that parses a command line command and its options.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Commands.ICommandParser.CommandHelp">
            <summary>
            Defines the help text of the command.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Commands.ICommandParser.CommandName">
            <summary>
            Defines the name of the command.
            Will be null, if the command is the default command (see <see cref="P:ParseTheArgs.Parsers.Commands.ICommandParser.IsCommandDefault" />).
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Commands.ICommandParser.IsCommandDefault">
            <summary>
            Determines if the command is the default (non-named) command.
            If the command is the default command <see cref="P:ParseTheArgs.Parsers.Commands.ICommandParser.CommandName" /> will be null.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.ICommandParser.GetHelpText">
            <summary>
            Gets the help text of the option.
            </summary>
            <returns>The help text of the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.ICommandParser.Parse(System.Collections.Generic.List{ParseTheArgs.Tokens.Token},ParseTheArgs.ParseResult)">
            <summary>
            Parses the given tokens and puts the result of the parsing into the given parse result object.
            </summary>
            <param name="tokens">The tokens to parse.</param>
            <param name="parseResult">The object where to put the result of the parsing into.</param>
        </member>
        <member name="M:ParseTheArgs.Parsers.Commands.ICommandParser.Validate(System.Collections.Generic.List{ParseTheArgs.Tokens.Token},ParseTheArgs.ParseResult)">
            <summary>
            Validates the given tokens and puts the result of the validation into the given parse result object.
            </summary>
            <param name="tokens">The tokens to validate.</param>
            <param name="parseResult">The object where to put the result of the validation into.</param>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.BooleanOptionParser">
            <summary>
            Parses a valueless (switch) command line option.
            The target property will be set to true when the option is present, otherwise the target property will be set to false.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.BooleanOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Boolean" /> or <see cref="T:System.Nullable`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.BooleanOptionParser.IsOptionRequired">
            <summary>
            Determines if the option is required.
            Since this option type does not have a value (it is a switch option) it can never be required.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.BooleanOptionParser.OptionType">
            <summary>
            The type of the option the parser parses.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.BooleanOptionParser.Parse(System.Collections.Generic.List{ParseTheArgs.Tokens.Token},ParseTheArgs.ParseResult)">
            <summary>
            Parses the given tokens and puts the result of the parsing into the given parse result object.
            </summary>
            <param name="tokens">The tokens to parse.</param>
            <param name="parseResult">The object where to put result of the parsing into.</param>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.DateTimeListOptionParser">
            <summary>
            Parses a command line option that accepts one or more <see cref="T:System.DateTime" /> values.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.DateTimeListOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Collections.Generic.List`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.DateTimeListOptionParser.DateTimeFormat">
            <summary>
            Defines the format to use when parsing the option value to a <see cref="T:System.DateTime" />.
            For supported formats see the documentation of <see cref="M:System.DateTime.Parse(System.String)" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.DateTimeListOptionParser.DateTimeStyles">
            <summary>
            Defines the date time styles that are permitted when parsing the option value to a <see cref="T:System.DateTime" />.
            The default is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.DateTimeListOptionParser.FormatProvider">
            <summary>
            Defines the format provider to use to parse the option value to a <see cref="T:System.DateTime" />.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.DateTimeListOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.DateTime@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.DateTimeOptionParser">
            <summary>
            Parses a command line option that accepts a single <see cref="T:System.DateTime" /> value.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.DateTimeOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.DateTime" /> or <see cref="T:System.Nullable`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.DateTimeOptionParser.DateTimeFormat">
            <summary>
            Defines the format to use when parsing the option value to a <see cref="T:System.DateTime" />.
            For supported formats see the documentation of <see cref="M:System.DateTime.Parse(System.String)" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.DateTimeOptionParser.DateTimeStyles">
            <summary>
            Defines the date time styles that are permitted when parsing the option value to a <see cref="T:System.DateTime" />.
            The default is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.DateTimeOptionParser.FormatProvider">
            <summary>
            Defines the format provider to use to parse the option value to a <see cref="T:System.DateTime" />.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.DateTimeOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.DateTime@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.DecimalListOptionParser">
            <summary>
            Parses a command line option that accepts one or more <see cref="T:System.Decimal" /> values.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.DecimalListOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Collections.Generic.List`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.DecimalListOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.Decimal@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.DecimalOptionParser">
            <summary>
            Parses a command line option that accepts a single <see cref="T:System.Decimal" /> value.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.DecimalOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Decimal" /> or <see cref="T:System.Nullable`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.DecimalOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.Decimal@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.EnumListOptionParser`1">
            <summary>
            Parses a command line option that accepts one or more enum members of the enum <typeparamref name="TEnum" />.
            </summary>
            <typeparam name="TEnum">The type of the enum the parser accepts as option values.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.EnumListOptionParser`1.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Collections.Generic.List`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.EnumListOptionParser`1.EnumValuesHelps">
            <summary>
            Defines the help texts for individual enum member of the type <typeparamref name="TEnum" />.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.EnumListOptionParser`1.GetHelpText">
            <summary>
            Gets the help text of the option.
            </summary>
            <returns>The help text of the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.EnumListOptionParser`1.TryParseValue(System.String,ParseTheArgs.ParseResult,`0@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.EnumOptionParser`1">
            <summary>
            Parses a command line option that accepts a single enum member of the enum <typeparamref name="TEnum" />.
            </summary>
            <typeparam name="TEnum">The type of the enum the parser accepts as option value.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.EnumOptionParser`1.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <typeparamref name="TEnum" /> or <see cref="T:System.Nullable`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.EnumOptionParser`1.EnumValuesHelps">
            <summary>
            Defines the help texts for individual enum member of the type <typeparamref name="TEnum" />.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.EnumOptionParser`1.GetHelpText">
            <summary>
            Gets the help text of the option.
            </summary>
            <returns>The help text of the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.EnumOptionParser`1.TryParseValue(System.String,ParseTheArgs.ParseResult,`0@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.GuidListOptionParser">
            <summary>
            Parses a command line option that accepts one or more <see cref="T:System.Guid" /> values.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.GuidListOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Collections.Generic.List`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.GuidListOptionParser.GuidFormat">
            <summary>
            Defines the format to use when parsing the option value to a <see cref="T:System.Guid" />.
            For supported formats see the documentation of <see cref="M:System.Guid.Parse(System.String)" />.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.GuidListOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.Guid@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.GuidOptionParser">
            <summary>
            Parses a command line option that accepts a single <see cref="T:System.Guid" /> value.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.GuidOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Guid" /> or <see cref="T:System.Nullable`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.GuidOptionParser.GuidFormat">
            <summary>
            Defines the format to use when parsing the option value to a <see cref="T:System.Guid" />.
            For supported formats see the documentation of <see cref="M:System.Guid.ParseExact(System.String,System.String)" />.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.GuidOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.Guid@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.Int64ListOptionParser">
            <summary>
            Parses a command line option that accepts one or more <see cref="T:System.Int64" /> values.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.Int64ListOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Collections.Generic.List`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.Int64ListOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.Int64@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.Int64OptionParser">
            <summary>
            Parses a command line option that accepts a single <see cref="T:System.Int64" /> value.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.Int64OptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Int64" /> or <see cref="T:System.Nullable`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.Int64OptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.Int64@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.MultiValueOptionParser`1">
            <summary>
            Parses a command line option that accepts one or more values of type <typeparamref name="TOptionValue" />.
            </summary>
            <typeparam name="TOptionValue">The type of the option value.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.MultiValueOptionParser`1.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.MultiValueOptionParser`1.OptionDefaultValue">
            <summary>
            Defines the default value to use for the option when the option is not given.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.MultiValueOptionParser`1.OptionType">
            <summary>
            The type of the option the parser parses.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.MultiValueOptionParser`1.Parse(System.Collections.Generic.List{ParseTheArgs.Tokens.Token},ParseTheArgs.ParseResult)">
            <summary>
            Parses the given tokens and puts the result of the parsing into the given parse result object.
            </summary>
            <param name="tokens">The tokens to parse.</param>
            <param name="parseResult">The object where to put result of the parsing into.</param>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.MultiValueOptionParser`1.TryParseValue(System.String,ParseTheArgs.ParseResult,`0@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.NumericListOptionParser`1">
            <summary>
            Parses a command line option that accepts one or more numeric values of the type <typeparamref name="TValue" />.
            </summary>
            <typeparam name="TValue">The specific numeric type the parser parses.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.NumericListOptionParser`1.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.NumericListOptionParser`1.FormatProvider">
            <summary>
            Defines the format provider to use to parse the option value to a numeric value.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.NumericListOptionParser`1.NumberStyles">
            <summary>
            Defines the number styles that are permitted when parsing the option value to a numeric value.
            The default is <see cref="F:System.Globalization.NumberStyles.Any" />.
            </summary>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.NumericOptionParser`1">
            <summary>
            Parses a command line option that accepts a single numeric value of the type <typeparamref name="TValue" />.
            </summary>
            <typeparam name="TValue">The specific numeric type the parser parses.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.NumericOptionParser`1.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.NumericOptionParser`1.FormatProvider">
            <summary>
            Defines the format provider to use to parse the option value to a numeric value.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.NumericOptionParser`1.NumberStyles">
            <summary>
            Defines the number styles that are permitted when parsing the option value to a numeric value.
            The default is <see cref="F:System.Globalization.NumberStyles.Any" />.
            </summary>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.OptionParser">
            <summary>
            Parses a command line option.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.OptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.OptionParser.IsOptionRequired">
            <summary>
            Determines if the option is required.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.OptionParser.OptionHelp">
            <summary>
            Defines the help text of the option.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.OptionParser.OptionName">
            <summary>
            The name of the option the parser parses.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.OptionParser.OptionType">
            <summary>
            The type of the option the parser parses.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.OptionParser.TargetProperty">
            <summary>
            Defines the property where the value of the option will be stored.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.OptionParser.GetHelpText">
            <summary>
            Gets the help text of the option.
            </summary>
            <returns>The help text of the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.OptionParser.Parse(System.Collections.Generic.List{ParseTheArgs.Tokens.Token},ParseTheArgs.ParseResult)">
            <summary>
            Parses the given tokens and puts the result of the parsing into the given parse result object.
            </summary>
            <param name="tokens">The tokens to parse.</param>
            <param name="parseResult">The object where to put result of the parsing into.</param>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.OptionType">
            <summary>
            Specifies the type of an option.
            </summary>
        </member>
        <member name="F:ParseTheArgs.Parsers.Options.OptionType.ValuelessOption">
            <summary>
            An option that does not have a value (e.g. a switch option).
            </summary>
        </member>
        <member name="F:ParseTheArgs.Parsers.Options.OptionType.SingleValueOption">
            <summary>
            An option that accepts a single value.
            </summary>
        </member>
        <member name="F:ParseTheArgs.Parsers.Options.OptionType.MultiValueOption">
            <summary>
            An option that accepts one or more values.
            </summary>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.SingleValueOptionParser`1">
            <summary>
            Parses a command line option that accepts a single value of type <typeparamref name="TOptionValue" />.
            </summary>
            <typeparam name="TOptionValue">The type of the option value.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.SingleValueOptionParser`1.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.SingleValueOptionParser`1.OptionDefaultValue">
            <summary>
            Defines the default value to use for the option when the option is not given.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.SingleValueOptionParser`1.OptionType">
            <summary>
            The type of the option the parser parses.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.SingleValueOptionParser`1.Parse(System.Collections.Generic.List{ParseTheArgs.Tokens.Token},ParseTheArgs.ParseResult)">
            <summary>
            Parses the given tokens and puts the result of the parsing into the given parse result object.
            </summary>
            <param name="tokens">The tokens to parse.</param>
            <param name="parseResult">The object where to put result of the parsing into.</param>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.SingleValueOptionParser`1.TryParseValue(System.String,ParseTheArgs.ParseResult,`0@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.StringListOptionParser">
            <summary>
            Parses a command line option that accepts one or more <see cref="T:System.String" /> values.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.StringListOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Collections.Generic.List`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.StringListOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.String@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.StringOptionParser">
            <summary>
            Parses a command line option that accepts a single <see cref="T:System.String" /> value.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.StringOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.String" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.StringOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.String@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.TimeSpanListOptionParser">
            <summary>
            Parses a command line option that accepts one or more <see cref="T:System.TimeSpan" /> values.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.TimeSpanListOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.Collections.Generic.List`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.TimeSpanListOptionParser.FormatProvider">
            <summary>
            Defines the format provider to use to parse the option value to a <see cref="T:System.TimeSpan" />.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.TimeSpanListOptionParser.TimeSpanFormat">
            <summary>
            Defines the format to use when parsing the option value to a <see cref="T:System.TimeSpan" />.
            For supported formats see the documentation of <see cref="M:System.TimeSpan.Parse(System.String)" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.TimeSpanListOptionParser.TimeSpanStyles">
            <summary>
            Defines the date time styles that are permitted when parsing the option value to a <see cref="T:System.TimeSpan" />.
            The default is <see cref="F:System.Globalization.TimeSpanStyles.None" />.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.TimeSpanListOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.TimeSpan@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.TimeSpanOptionParser">
            <summary>
            Parses a command line option that accepts a single <see cref="T:System.TimeSpan" /> value.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.TimeSpanOptionParser.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="targetProperty">The property where the value of the option will be stored.</param>
            <param name="optionName">The name of the option the parser parses.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetProperty" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetProperty" /> does not have the property type <see cref="T:System.TimeSpan" /> or <see cref="T:System.Nullable`1" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="optionName" /> is null or an empty string.</exception>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.TimeSpanOptionParser.FormatProvider">
            <summary>
            Defines the format provider to use to parse the option value to a <see cref="T:System.TimeSpan" />.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.TimeSpanOptionParser.TimeSpanFormat">
            <summary>
            Defines the format to use when parsing the option value to a <see cref="T:System.TimeSpan" />.
            For supported formats see the documentation of <see cref="M:System.TimeSpan.Parse(System.String)" />.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Parsers.Options.TimeSpanOptionParser.TimeSpanStyles">
            <summary>
            Defines the date time styles that are permitted when parsing the option value to a <see cref="T:System.TimeSpan" />.
            The default is <see cref="F:System.Globalization.TimeSpanStyles.None" />.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.TimeSpanOptionParser.TryParseValue(System.String,ParseTheArgs.ParseResult,System.TimeSpan@)">
            <summary>
            Parses the given value to the desired option value type of the option parser.
            </summary>
            <param name="optionValue">The option value to parse.</param>
            <param name="parseResult">The object where to put parse errors in if a parse error occurred.</param>
            <param name="resultValue">The parsed value.</param>
            <returns>True if the given option value could be parsed; otherwise false.</returns>
        </member>
        <member name="T:ParseTheArgs.Parsers.Options.ValueParser">
            <summary>
            Parses strings to various types (e.g. DateTime).
            </summary>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.ValueParser.TryParseDateTime(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="value">A string containing a date and time to convert.</param>
            <param name="format">The required format of <paramref name="value" />. See the Remarks section for more information.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="value" />.</param>
            <param name="styles">A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="value" />.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="value" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <paramref name="value" /> does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized.</param>
            <returns><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or a string consisting only of white-space characters.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.ValueParser.TryParseDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
            <param name="formatProvider">An object that supplies culture-specific parsing information about <paramref name="value" />.</param>
            <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="value" />, if the conversion succeeded, or is zero if the conversion failed. The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
            <returns><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or a string consisting only of white-space characters.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.ValueParser.TryParseEnum``1(System.String,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The operation is case-sensitive. The return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value" />.</typeparam>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="result">When this method returns, <paramref name="result" /> contains an object of type <typeparamref name="TEnum" /> whose value is represented by <paramref name="value" /> if the parse operation succeeds. If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <typeparamref name="TEnum" />. Note that this value need not be a member of the <typeparamref name="TEnum" /> enumeration. This parameter is passed uninitialized.</param>
            <returns><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or a string consisting only of white-space characters.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.ValueParser.TryParseGuid(System.String,System.String,System.Guid@)">
            <summary>
            Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.
            </summary>
            <param name="value">The GUID to convert.</param>
            <param name="format">One of the following specifiers that indicates the exact format to use when interpreting <paramref name="value" />: "N", "D", "B", "P", or "X".</param>
            <param name="result">The structure that will contain the parsed value. If the method returns <see langword="true" />, <paramref name="result" /> contains a valid <see cref="T:System.Guid" />. If the method returns <see langword="false" />, <paramref name="result" /> equals <see cref="F:System.Guid.Empty" />.</param>
            <returns><see langword="true" /> if the parse operation was successful; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or a string consisting only of white-space characters.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.ValueParser.TryParseInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="styles" />.</param>
            <param name="styles">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="value" />.</param>
            <param name="result">When this method returns, contains the 64-bit signed integer value equivalent of the number contained in <paramref name="value" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="value" /> parameter is <see langword="null" />  or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="styles" />, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</param>
            <returns><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or a string consisting only of white-space characters.</exception>
        </member>
        <member name="M:ParseTheArgs.Parsers.Options.ValueParser.TryParseTimeSpan(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
            <summary>
            Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="value">A string that specifies the time interval to convert.</param>
            <param name="format">A standard or custom format string that defines the required format of <paramref name="value" />.</param>
            <param name="formatProvider">An object that provides culture-specific formatting information.</param>
            <param name="styles">One or more enumeration values that indicate the style of <paramref name="value" />.</param>
            <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="value" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
            <returns><see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or a string consisting only of white-space characters.</exception>
        </member>
        <member name="T:ParseTheArgs.Setup.Commands.CommandSetup`1">
            <summary>
            Represents the configuration of a command.
            </summary>
            <typeparam name="TCommandOptions">The type where the values of the options of the command will be stored in.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.#ctor(ParseTheArgs.Parser,ParseTheArgs.Parsers.Commands.CommandParser{`0})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parser">The parser the command belongs to.</param>
            <param name="commandParser">The command parser for the command.</param>
            <exception cref="T:System.ArgumentException"><paramref name="parser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
        </member>
        <member name="P:ParseTheArgs.Setup.Commands.CommandSetup`1.CommandParser">
            <summary>
            The parser for the command.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Sets up a boolean option (a.k.a switch option).
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.BooleanOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.String" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.StringOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{System.String}}})">
            <summary>
            Sets up an option that accepts one or more <see cref="T:System.String" /> values.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option values should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.StringOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.DateTimeOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{System.DateTime}}})">
            <summary>
            Sets up an option that accepts one or more <see cref="T:System.DateTime" /> values.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option values should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.DateTimeOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.DateTimeOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.TimeSpanOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{System.TimeSpan}}})">
            <summary>
            Sets up an option that accepts one or more <see cref="T:System.TimeSpan" /> values.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option values should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.TimeSpanListOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.TimeSpanOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.Int64" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.Int64OptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{System.Int64}}})">
            <summary>
            Sets up an option that accepts one or more <see cref="T:System.Int64" /> values.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option values should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.Int64ListOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.Int64" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.Int64OptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Guid}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.Guid" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.GuidOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{System.Guid}}})">
            <summary>
            Sets up an option that accepts one or more <see cref="T:System.Guid" /> values.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option values should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.GuidListOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.Guid" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.GuidOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.DecimalOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{System.Decimal}}})">
            <summary>
            Sets up an option that accepts one or more <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option values should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.DecimalListOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Sets up an option that accepts a single <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.DecimalOptionSetup`1" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets up an option that accepts a single enum member (of the type <typeparamref name="TEnum" />).
            The option value is expected to be the name of an enum member of the given type <typeparamref name="TEnum" /> (case-insensitive).
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.EnumOptionSetup`2" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
            Sets up an option that accepts a single enum member (of the type <typeparamref name="TEnum" />).
            The option value is expected to be the name of an enum member of the given type <typeparamref name="TEnum" /> (case-insensitive).
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option value should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.EnumOptionSetup`2" /> that can be used to configure the option.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.CommandSetup`1.Option``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            Sets up an option that accepts one or more enum members (of the type <typeparamref name="TEnum" />).
            The option values are expected to be the names of enum members of the given type <typeparamref name="TEnum" /> (case-insensitive).
            </summary>
            <param name="propertyExpression">An expression that points to a property (the target property) of the <typeparamref name="TCommandOptions" /> type in which the option values should be stored.</param>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Options.EnumListOptionSetup`2" /> that can be used to configure the option.</returns>
        </member>
        <member name="F:ParseTheArgs.Setup.Commands.CommandSetup`1.Parser">
            <summary>
            Defines the parser the command belongs to.
            </summary>
        </member>
        <member name="T:ParseTheArgs.Setup.Commands.DefaultCommandSetup`1">
            <summary>
            Represents the configuration of the default (unnamed) command.
            </summary>
            <typeparam name="TCommandOptions">The type where the values of the options of the command will be stored in.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.DefaultCommandSetup`1.#ctor(ParseTheArgs.Parser,ParseTheArgs.Parsers.Commands.CommandParser{`0})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parser">The parser the command belongs to.</param>
            <param name="commandParser">The command parser for the command.</param>
            <exception cref="T:System.ArgumentException"><paramref name="parser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.DefaultCommandSetup`1.ExampleUsage(System.String)">
            <summary>
            Sets a text that describes an example usage of the command.
            </summary>
            <param name="exampleUsageText">The text that describes an example usage of the command.</param>
            <returns>A reference to this instance for further configuration of the command.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.DefaultCommandSetup`1.Help(System.String)">
            <summary>
            Sets the help text for the command.
            </summary>
            <param name="help">The help text for the command.</param>
            <returns>A reference to this instance for further configuration of the command.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.DefaultCommandSetup`1.Validate(System.Action{ParseTheArgs.Validation.CommandValidatorContext{`0}})">
            <summary>
            Sets the validator for this command.
            The given action is executed after all options of the command have been parsed and their values have been stored in <see cref="P:ParseTheArgs.ParseResult.CommandOptions" />.
            </summary>
            <param name="validator">An action that validates the command options.</param>
            <returns>A reference to this instance for further configuration of the command.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Commands.NamedCommandSetup`1">
            <summary>
            Represents the configuration of a named (non-default) command.
            </summary>
            <typeparam name="TCommandOptions">The type where the values of the options of the command will be stored in.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.NamedCommandSetup`1.#ctor(ParseTheArgs.Parser,ParseTheArgs.Parsers.Commands.CommandParser{`0})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parser">The parser the command belongs to.</param>
            <param name="commandParser">The command parser for the command.</param>
            <exception cref="T:System.ArgumentException"><paramref name="parser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.NamedCommandSetup`1.ExampleUsage(System.String)">
            <summary>
            Sets a text that describes an example usage of the command.
            </summary>
            <param name="exampleUsageText">The text that describes an example usage of the command.</param>
            <returns>A reference to this instance for further configuration of the command.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.NamedCommandSetup`1.Help(System.String)">
            <summary>
            Sets the help text for the command.
            </summary>
            <param name="help">The help text for the command.</param>
            <returns>A reference to this instance for further configuration of the command.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.NamedCommandSetup`1.Name(System.String)">
            <summary>
            Sets the name of the command.
            Initially (until this method is called) the name of the given <typeparamref name="TCommandOptions" /> type (converted to lower camel case, see <see cref="M:ParseTheArgs.Extensions.StringExtensions.ToCamelCase(System.String)" />) will be used as name for the command.
            </summary>
            <param name="name">The name of the command.</param>
            <returns>A reference to this instance for further configuration of the command.</returns>
            <exception cref="T:System.ArgumentException">Thrown if another command with the same name already exists.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Commands.NamedCommandSetup`1.Validate(System.Action{ParseTheArgs.Validation.CommandValidatorContext{`0}})">
            <summary>
            Sets the validator for this command.
            The given action is executed after all options of the command have been parsed and their values have been stored in <see cref="P:ParseTheArgs.ParseResult.CommandOptions" />.
            </summary>
            <param name="validator">An action that validates the command options.</param>
            <returns>A reference to this instance for further configuration of the command.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.BooleanOptionSetup`1">
            <summary>
            Represents the configuration of a valueless (switch) command line option.
            The target property will be set to true when the option is present, otherwise the target property will be set to false.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.BooleanOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.BooleanOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.DateTimeListOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts one or more <see cref="T:System.DateTime" /> values.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DateTimeListOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.DateTimeListOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DateTimeListOptionSetup`1.Format(System.String)">
            <summary>
            Sets the format that is accepted when the option values are parsed to <see cref="T:System.DateTime" /> values.
            For supported formats see the documentation of <see cref="M:System.DateTime.Parse(System.String)" />.
            </summary>
            <param name="dateTimeFormat">The format that is accepted when the option values are parsed to <see cref="T:System.DateTime" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DateTimeListOptionSetup`1.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to be used to parse the option values to <see cref="T:System.DateTime" /> values.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="formatProvider">The format provider to be used to parse the option values to <see cref="T:System.DateTime" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DateTimeListOptionSetup`1.Styles(System.Globalization.DateTimeStyles)">
            <summary>
            Sets the date time styles that are permitted when parsing the option values to <see cref="T:System.DateTime" /> values.
            The default is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </summary>
            <param name="dateTimeStyles">The date time styles that are permitted when parsing the option values to <see cref="T:System.DateTime" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.DateTimeOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts a single <see cref="T:System.DateTime" /> value.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DateTimeOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.DateTimeOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DateTimeOptionSetup`1.Format(System.String)">
            <summary>
            Sets the format that is accepted when the option value is parsed to a <see cref="T:System.DateTime" />.
            For supported formats see the documentation of <see cref="M:System.DateTime.Parse(System.String)" />.
            </summary>
            <param name="dateTimeFormat">The format that is accepted when the option value is parsed to a <see cref="T:System.DateTime" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DateTimeOptionSetup`1.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to be used to parse the option value to a <see cref="T:System.DateTime" />.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="formatProvider">The format provider to be used to parse the option value to a <see cref="T:System.DateTime" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DateTimeOptionSetup`1.Styles(System.Globalization.DateTimeStyles)">
            <summary>
            Sets the date time styles that are permitted when parsing the option value to a <see cref="T:System.DateTime" />.
            The default is <see cref="F:System.Globalization.DateTimeStyles.None" />.
            </summary>
            <param name="dateTimeStyles">The date time styles that are permitted when parsing the option value to a <see cref="T:System.DateTime" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.DecimalListOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts one or more <see cref="T:System.Decimal" /> values.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DecimalListOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.DecimalListOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DecimalListOptionSetup`1.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to be used to parse the option value to <see cref="T:System.Decimal" /> values.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="formatProvider">The format provider to be used to parse the option value to <see cref="T:System.Decimal" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DecimalListOptionSetup`1.Styles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles that are permitted when parsing the option value to <see cref="T:System.Decimal" /> values.
            The default is <see cref="F:System.Globalization.NumberStyles.Any" />.
            </summary>
            <param name="numberStyles">The number styles that are permitted when parsing the option value to <see cref="T:System.Decimal" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.DecimalOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts a single <see cref="T:System.Decimal" /> value.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DecimalOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.DecimalOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DecimalOptionSetup`1.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to be used to parse the option value to a <see cref="T:System.Decimal" />.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="formatProvider">The format provider to be used to parse the option value to a <see cref="T:System.Decimal" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.DecimalOptionSetup`1.Styles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles that are permitted when parsing the option value to a <see cref="T:System.Decimal" />.
            The default is <see cref="F:System.Globalization.NumberStyles.Any" />.
            </summary>
            <param name="numberStyles">The number styles that are permitted when parsing the option value to a <see cref="T:System.Decimal" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.EnumListOptionSetup`2">
            <summary>
            Represents the configuration of an option that accepts one or more enum members of the enum <typeparamref name="TEnum" />.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
            <typeparam name="TEnum">The type of the enum the option accepts as option values.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.EnumListOptionSetup`2.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.EnumListOptionParser{`1})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.EnumListOptionSetup`2.EnumValueHelp(`1,System.String)">
            <summary>
            Sets the help text for the given enum member of the enum type <typeparamref name="TEnum" />.
            </summary>
            <param name="value">The enum member to set the help text for.</param>
            <param name="help">The help text for the enum member.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.EnumOptionSetup`2">
            <summary>
            Represents the configuration of an option that accepts a single enum member of the enum <typeparamref name="TEnum" />.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
            <typeparam name="TEnum">The type of the enum the option accepts as option value.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.EnumOptionSetup`2.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.EnumOptionParser{`1})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.EnumOptionSetup`2.EnumValueHelp(`1,System.String)">
            <summary>
            Sets the help text for the given enum member of the enum type <typeparamref name="TEnum" />.
            </summary>
            <param name="value">The enum member to set the help text for.</param>
            <param name="help">The help text for the enum member.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.GuidListOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts one or more <see cref="T:System.Guid" /> values.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.GuidListOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.GuidListOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.GuidListOptionSetup`1.Format(System.String)">
            <summary>
            Sets the format that is accepted when the option values are parsed to <see cref="T:System.Guid" /> values.
            For supported formats see the documentation of <see cref="M:System.Guid.Parse(System.String)" />.
            </summary>
            <param name="guidFormat">The format that is accepted when the option values are parsed to <see cref="T:System.Guid" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.GuidOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts a single <see cref="T:System.Guid" /> value.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.GuidOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.GuidOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.GuidOptionSetup`1.Format(System.String)">
            <summary>
            Sets the format that is accepted when the option value is parsed to a <see cref="T:System.Guid" />.
            For supported formats see the documentation of <see cref="M:System.Guid.Parse(System.String)" />.
            </summary>
            <param name="guidFormat">The format that is accepted when the option value is parsed to a <see cref="T:System.Guid" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.Int64ListOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts one or more <see cref="T:System.Int64" /> values.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.Int64ListOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.Int64ListOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.Int64ListOptionSetup`1.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to be used to parse the option value to <see cref="T:System.Int64" /> values.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="formatProvider">The format provider to be used to parse the option value to <see cref="T:System.Int64" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.Int64ListOptionSetup`1.Styles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles that are permitted when parsing the option value to <see cref="T:System.Int64" /> values.
            The default is <see cref="F:System.Globalization.NumberStyles.Any" />.
            </summary>
            <param name="numberStyles">The number styles that are permitted when parsing the option value to <see cref="T:System.Int64" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.Int64OptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts a single <see cref="T:System.Int64" /> value.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.Int64OptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.Int64OptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.Int64OptionSetup`1.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to be used to parse the option value to a <see cref="T:System.Int64" />.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="formatProvider">The format provider to be used to parse the option value to a <see cref="T:System.Int64" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.Int64OptionSetup`1.Styles(System.Globalization.NumberStyles)">
            <summary>
            Sets the number styles that are permitted when parsing the option value to a <see cref="T:System.Int64" />.
            The default is <see cref="F:System.Globalization.NumberStyles.Any" />.
            </summary>
            <param name="numberStyles">The number styles that are permitted when parsing the option value to a <see cref="T:System.Int64" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.MultiValueOptionSetup`4">
            <summary>
            Represents the configuration of an option that accepts one or more values of the type <typeparamref name="TOptionValue" />.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
            <typeparam name="TOptionParser">The type of parser for the option.</typeparam>
            <typeparam name="TOptionSetup">The type of setup for the option.</typeparam>
            <typeparam name="TOptionValue">The type of the option value(s).</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.MultiValueOptionSetup`4.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},`1)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.MultiValueOptionSetup`4.DefaultValue(System.Collections.Generic.List{`3})">
            <summary>
            Sets the default value for the option.
            If the option is not specified on the command line the target property will be set to the given value.
            </summary>
            <param name="defaultValue">The default value for the option.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.MultiValueOptionSetup`4.IsRequired">
            <summary>
            Marks that the option as required.
            If the option is marked as required and is not specified on the command line a parse error will be caused (<see cref="P:ParseTheArgs.ParseResult.Errors" />).
            </summary>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.OptionSetup`3">
            <summary>
            Represents the configuration of an option.
            </summary>
            <typeparam name="TCommandOptions">The type in which the values of the options (of the command the option belongs to) will be stored.</typeparam>
            <typeparam name="TOptionParser">The type of parser for the option.</typeparam>
            <typeparam name="TOptionSetup">The type of setup for the option.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.OptionSetup`3.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},`1)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.OptionSetup`3.Help(System.String)">
            <summary>
            Sets the help text for the option.
            </summary>
            <param name="help">The help text for the option.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.OptionSetup`3.Name(System.String)">
            <summary>
            Sets the name for the option.
            On the command line the option can be passed by writing two dashes followed by the given name (e.g. --option).
            </summary>
            <param name="name">The name for the option.</param>
            <returns>A reference to this instance for further configuration.</returns>
            <exception cref="T:System.ArgumentException">Throw if another option with the same name as the given one already exists for the command the option belongs to.</exception>
        </member>
        <member name="F:ParseTheArgs.Setup.Options.OptionSetup`3.commandParser">
            <summary>
            Defines the parser for the command the option belongs to.
            </summary>
        </member>
        <member name="F:ParseTheArgs.Setup.Options.OptionSetup`3.optionParser">
            <summary>
            Defines the parser for the option.
            </summary>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.SingleValueOptionSetup`4">
            <summary>
            Represents the configuration of an option that accepts a single value of the type <typeparamref name="TOptionValue" />.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
            <typeparam name="TOptionParser">The type of parser for the option.</typeparam>
            <typeparam name="TOptionSetup">The type of setup for the option.</typeparam>
            <typeparam name="TOptionValue">The type of the option value.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.SingleValueOptionSetup`4.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},`1)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.SingleValueOptionSetup`4.DefaultValue(`3)">
            <summary>
            Sets the default value for the option.
            If the option is not specified on the command line the target property will be set to the given value.
            </summary>
            <param name="defaultValue">The default value for the option.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.SingleValueOptionSetup`4.IsRequired">
            <summary>
            Marks that the option as required.
            If the option is marked as required and is not specified on the command line a parse error will be caused (<see cref="P:ParseTheArgs.ParseResult.Errors" />).
            </summary>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.StringListOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts one or more <see cref="T:System.String" /> values.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.StringListOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.StringListOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.StringOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts a single <see cref="T:System.String" /> value.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.StringOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.StringOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.TimeSpanListOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts one or more <see cref="T:System.TimeSpan" /> values.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.TimeSpanListOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.TimeSpanListOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.TimeSpanListOptionSetup`1.Format(System.String)">
            <summary>
            Sets the format that is accepted when the option values are parsed to <see cref="T:System.TimeSpan" /> values.
            For supported formats see the documentation of <see cref="M:System.TimeSpan.Parse(System.String)" />.
            </summary>
            <param name="timeSpanFormat">The format that is accepted when the option values are parsed to <see cref="T:System.TimeSpan" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.TimeSpanListOptionSetup`1.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to be used to parse the option values to <see cref="T:System.TimeSpan" /> values.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="formatProvider">The format provider to be used to parse the option values to <see cref="T:System.TimeSpan" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.TimeSpanListOptionSetup`1.Styles(System.Globalization.TimeSpanStyles)">
            <summary>
            Sets the time span styles that are permitted when parsing the option values to <see cref="T:System.TimeSpan" /> values.
            The default is <see cref="F:System.Globalization.TimeSpanStyles.None" />.
            </summary>
            <param name="timeSpanStyles">The time span styles that are permitted when parsing the option values to <see cref="T:System.TimeSpan" /> values.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.Options.TimeSpanOptionSetup`1">
            <summary>
            Represents the configuration of an option that accepts a single <see cref="T:System.TimeSpan" /> value.
            </summary>
            <typeparam name="TCommandOptions">The type in which the options of the command the option belongs to will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.TimeSpanOptionSetup`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.Parsers.Options.TimeSpanOptionParser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser for the command the option belongs to.</param>
            <param name="optionParser">The parser for the option.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionParser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.TimeSpanOptionSetup`1.Format(System.String)">
            <summary>
            Sets the format that is accepted when the option value is parsed to a <see cref="T:System.TimeSpan" />.
            For supported formats see the documentation of <see cref="M:System.TimeSpan.Parse(System.String)" />.
            </summary>
            <param name="timeSpanFormat">The format that is accepted when the option value is parsed to a <see cref="T:System.TimeSpan" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.TimeSpanOptionSetup`1.FormatProvider(System.IFormatProvider)">
            <summary>
            Sets the format provider to be used to parse the option value to a <see cref="T:System.TimeSpan" />.
            The default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="formatProvider">The format provider to be used to parse the option value to a <see cref="T:System.TimeSpan" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.Options.TimeSpanOptionSetup`1.Styles(System.Globalization.TimeSpanStyles)">
            <summary>
            Sets the time span styles that are permitted when parsing the option value to a <see cref="T:System.TimeSpan" />.
            The default is <see cref="F:System.Globalization.TimeSpanStyles.None" />.
            </summary>
            <param name="timeSpanStyles">The time span styles that are permitted when parsing the option value to a <see cref="T:System.TimeSpan" />.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Setup.ParserSetup">
            <summary>
            Represents the configuration of a <see cref="T:ParseTheArgs.Parser" />.
            Can be used to configure a parser (e.g. setup commands and options).
            </summary>
        </member>
        <member name="M:ParseTheArgs.Setup.ParserSetup.#ctor(ParseTheArgs.Parser)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="parser">The parser this instance should set up.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parser" /> is null.</exception>
        </member>
        <member name="M:ParseTheArgs.Setup.ParserSetup.Banner(System.String)">
            <summary>
            Sets a banner text to display at the beginning of help texts and error texts (e.g. in the return value of <see cref="M:ParseTheArgs.Parser.GetHelpText(System.Boolean)" /> or <see cref="M:ParseTheArgs.Parser.GetErrorsText(ParseTheArgs.ParseResult,System.Boolean)" />).
            </summary>
            <param name="banner">The banner text to display in help texts.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.ParserSetup.Command``1">
            <summary>
            Sets up a non-default (named) command.
            Initially (until a name is set through <see cref="M:ParseTheArgs.Setup.Commands.NamedCommandSetup`1.Name(System.String)" />) the name of the given <typeparamref name="TCommandOptions" /> type (converted to lower camel case, see <see cref="M:ParseTheArgs.Extensions.StringExtensions.ToCamelCase(System.String)" />) will be used as name for the command.
            
            When the command specified on the command line matches the name of the command an instance of <typeparamref name="TCommandOptions" /> will be instantiated and stored in <see cref="P:ParseTheArgs.ParseResult.CommandOptions" />.
            The values of options specified on the command line for the command will be stored in that instance.
            </summary>
            <typeparam name="TCommandOptions">The type where the values of the options of the command will be stored in.</typeparam>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Commands.NamedCommandSetup`1" /> that can be used to configure the command.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.ParserSetup.DefaultCommand``1">
            <summary>
            Sets up the default (unnamed) command.
            
            When no command is specified on the command line an instance of <typeparamref name="TCommandOptions" /> will be instantiated and stored in <see cref="P:ParseTheArgs.ParseResult.CommandOptions" />.
            The values of options specified on the command line for the command will be stored in that instance.
            </summary>
            <typeparam name="TCommandOptions">The type where the values of the options of the command will be stored in.</typeparam>
            <returns>An instance of <see cref="T:ParseTheArgs.Setup.Commands.DefaultCommandSetup`1" /> that can be used to configure the command.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.ParserSetup.ErrorTextWriter(System.IO.TextWriter)">
            <summary>
            Sets the text writer to write error messages to.
            When the arguments parsed cause errors (e.g. missing options) an error message is written to this text writer.
            </summary>
            <param name="textWriter">The text writer to write error messages to.</param>
            <returns>A reference to this instance for further configuration.</returns>
            <remarks>The default is <see cref="P:System.Console.Error" />.</remarks>
        </member>
        <member name="M:ParseTheArgs.Setup.ParserSetup.HelpTextMaxLineLength(System.Int32)">
            <summary>
            Sets the maximum length a line of a help text can have.
            When this method is not called, the current width of the console window is used.
            </summary>
            <param name="maxLineLength">The maximum length a line of a help text can have.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.ParserSetup.HelpTextWriter(System.IO.TextWriter)">
            <summary>
            Sets the text writer to write help messages to.
            When no options are given and there is no default command set up, the general help text will be written to this text writer (same text as <see cref="M:ParseTheArgs.Parser.GetHelpText(System.Boolean)" /> returns).
            When exactly one option with the value "help" is given, the general help text will be written to this text writer (same text as <see cref="M:ParseTheArgs.Parser.GetHelpText(System.Boolean)" /> returns).
            When exactly two options are given and the first has the value "help", the second is assumed to be the name of a command and the help text for the command will be written to this text writer (same text as <see cref="M:ParseTheArgs.Parser.GetCommandHelpText(System.String,System.Boolean)" /> returns).
            </summary>
            <param name="textWriter">The text writer to write help messages to.</param>
            <returns>A reference to this instance for further configuration.</returns>
            <remarks>The default is <see cref="P:System.Console.Out" />.</remarks>
        </member>
        <member name="M:ParseTheArgs.Setup.ParserSetup.IgnoreUnknownOptions">
            <summary>
            Specifies to ignore options that are unknown when options are parsed.
            
            The default behavior is that unknown options will cause parse errors (see <see cref="P:ParseTheArgs.ParseResult.Errors" />) when they encountered during parsing.
            After this method has been called unknown options will be ignored, so they will not cause errors.
            </summary>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="M:ParseTheArgs.Setup.ParserSetup.ProgramName(System.String)">
            <summary>
            Sets the name of the program to display in help texts.
            
            Initially (until a program name is set by calling this method) the name of the current process will be used as the program name.
            </summary>
            <param name="programName">The name of the program to display in help texts.</param>
            <returns>A reference to this instance for further configuration.</returns>
        </member>
        <member name="T:ParseTheArgs.Tokens.CommandLineArgumentsTokenizer">
            <summary>
            A tokenizer for command line arguments.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Tokens.CommandLineArgumentsTokenizer.Tokenize(System.String[])">
            <summary>
            Converts the given command line arguments to a sequence of tokens.
            </summary>
            <param name="args">The command line arguments to tokenize.</param>
            <returns>The tokens that represent the given command line arguments.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args" /> is null.</exception>
        </member>
        <member name="T:ParseTheArgs.Tokens.CommandToken">
            <summary>
            A token that represents a command line command.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Tokens.CommandToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandName">The name of the command.</param>
        </member>
        <member name="P:ParseTheArgs.Tokens.CommandToken.CommandName">
            <summary>
            The name of the command.
            </summary>
        </member>
        <member name="T:ParseTheArgs.Tokens.OptionToken">
            <summary>
            A token that represents a command line option.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Tokens.OptionToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option.</param>
        </member>
        <member name="M:ParseTheArgs.Tokens.OptionToken.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="optionName">The name of the option.</param>
            <param name="optionValues">The values of the option.</param>
        </member>
        <member name="P:ParseTheArgs.Tokens.OptionToken.OptionName">
            <summary>
            The name of the option.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Tokens.OptionToken.OptionValues">
            <summary>
            The values of the option.
            </summary>
        </member>
        <member name="T:ParseTheArgs.Tokens.Token">
            <summary>
            Represents a token of a command line.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Tokens.Token.IsParsed">
            <summary>
            Determines if the token has already been parsed.
            </summary>
        </member>
        <member name="T:ParseTheArgs.Validation.CommandValidatorContext`1">
            <summary>
            Represents the context for a validator for a command.
            </summary>
            <typeparam name="TCommandOptions">The type in which the values of the options of the command will be stored.</typeparam>
        </member>
        <member name="M:ParseTheArgs.Validation.CommandValidatorContext`1.#ctor(ParseTheArgs.Parsers.Commands.CommandParser{`0},ParseTheArgs.ParseResult)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="commandParser">The parser of the command.</param>
            <param name="parseResult">The (preliminary) result of the command line arguments parsing.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="commandParser" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parseResult" /> is null.</exception>
        </member>
        <member name="P:ParseTheArgs.Validation.CommandValidatorContext`1.CommandOptions">
            <summary>
            The instance in which the values of the options of the command are stored.
            </summary>
        </member>
        <member name="P:ParseTheArgs.Validation.CommandValidatorContext`1.ParseResult">
            <summary>
            The (preliminary) result of the command line arguments parsing.
            </summary>
        </member>
        <member name="M:ParseTheArgs.Validation.CommandValidatorContext`1.AddError(ParseTheArgs.Errors.IParseError)">
            <summary>
            Adds an error to the parse result.
            </summary>
            <param name="error">The error to add to the parse result.</param>
        </member>
        <member name="M:ParseTheArgs.Validation.CommandValidatorContext`1.GetOptionName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
             <summary>
             Gets the name of the option mapped to the specified property.
             </summary>
             <param name="optionSelector">An expression to specify the property that is mapped to an option.</param>
             <returns>The name of the option that is mapped to the specified property.</returns>
             <example>
             <code>
             public class PrintFileOptions
             {
                 public String File { get; set; }
             }
            
             public class Program
             {
                 public static void Main(String[] args)
                 {
                     var parser = new Parser();
                     var setup = parser.Setup;
            
                     var command = setup.DefaultCommand&lt;PrintFileOptions&gt;();
                     command.Option(a => a.File).Name("file").IsRequired();
                     command.Validate(context =>
                     {
                         if (!File.Exists(context.CommandOptions.File))
                         {
                             context.AddError(new InvalidOptionError(context.GetOptionName(a => a.File), "The specified file does not exist."));
                         }
                     });
                 }
             }
             </code>
             </example>
        </member>
    </members>
</doc>
